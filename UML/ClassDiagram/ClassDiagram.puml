@startuml
abstract class Application {
    + start(primaryStage : Stage) : void
}
class App {
    - JDBC_Driver : String
    - JDBC_URL : String
    - createDataSource() : HikariDataSource
    + main(args : String[]) : void
    + start(primaryStage : Stage) : void
}


interface DataSource {
    + initDataSource(hikariDataSource : HikariDataSource) : void
}
interface Closeable {
    + close() : void
}
interface ViewController{
   + close() : void
   + initDataSource(hikariDataSource : HikariDataSource) : void
   + setRepository(repository : Repository) : void
}
interface Repository<T, ID>{
     + findById(id : ID) : Optional<T>
     + findAll() : Iterable<T>
     + save(entity : T) : T
     + deleteById(id : ID) : void
     + deleteAll() : void
}

class LoginViewController {
    - tfPassword : PasswordField
    - tfUsername : TextField
    - hikariDataSource : HikariDataSource
    - onCancelClicked() : void
    - onOKClicked() : void
    - launchApplication() : void
    + close() : void
    + initDataSource(hikariDataSource : HikariDataSource) : void
}

class MainPageViewController {
    - hikariDataSource : HikariDataSource
    + initialize() : void
    + initDataSource(hikariDataSource : HikariDataSource) : void
    + close() : void
    + addObserver(observerExpense : ObserverExpense) : void
    + removeObserver(observerExpense : ObserverExpense) : void
    + notifyAllObservers(expenses : ObservableList<Expense>) : void
}

interface ObservableExpense {
    + addObserver(observerExpense : ObserverExpense) : void
    + removeObserver(observerExpense : ObserverExpense) : void
    + notifyAllObservers(expenses : ObservableList<Expense>) : void
}
interface ObserverExpense {
    + update(newExpenses : ObservableList<Expense>) : void
}

interface DataToCharts {
    + initCharts(expensesData : ObservableList<Expense>) : void
}

abstract class ChartController {
    + initCharts(expensesData : ObservableList<Expense>) : void
    + update(expensesData : ObservableList<Expense>) : void
    + showAboutInformation(contentText : String )
    + close() : void
}
class ExpenseAreaChartController {
    + close() : void
    + initCharts(expensesData : ObservableList<Expense>) : void
    + update(expensesData : ObservableList<Expense>) : void
}
class ExpensePieChartController {
    + close() : void
    + initCharts(expensesData : ObservableList<Expense>) : void
    + update(expensesData : ObservableList<Expense>) : void
}

class ExpenseRepository {
    - hikariDataSource : HikariDataSource
    + ExpenseRepository(hikariDataSource : HikariDataSource)
    + findById(id : Long) : Optional<Expense>
    + findAll() : Iterable<Expense>
    + save(entity : Expense) : Expense
    + deleteById(id : Long) : void
    + deleteAll() : void
}

class Expense {
    - id : Long
    - amount : Double
    - date : LocalDate
    - description : String

    + getAllExpenseTypes() : String
    + getAllPayingMethods() : String
}
enum ExpenseType {
    Miscellaneous
    Subscription
    EatingOut
    Groceries
    Debt
    Car
}
enum PayingMethod {
    Card
    Cash
}

class UserRepository {
    - hikariDataSource : HikariDataSource
    + UserRepository(hikariDataSource : HikariDataSource)
    + findById(id : Long) : Optional<User>
    + findAll() : Iterable<User>
    + save(entity : User) : User
    + deleteById(id : Long) : void
    + deleteAll() : void
}
class User {
    - id : Long
    - username : String
    - password : String
}

class AddExpenseDialog {
    + initialize() : void
    + AddExpenseDialog()
}


Application <|-- App
App -> ViewController

DataSource <|-- ViewController
Closeable <|-- ViewController

ViewController --> Repository

ViewController <|.. LoginViewController

ViewController <|.. MainPageViewController
ObservableExpense <|.. MainPageViewController
MainPageViewController --> ChartController
MainPageViewController --> AddExpenseDialog

ObservableExpense -> ObserverExpense

Closeable <|.. ChartController
DataToCharts <|.. ChartController

ObserverExpense <|.. ChartController
ChartController <|-- ExpenseAreaChartController
ChartController <|-- ExpensePieChartController
ChartController --> Expense

Repository <|.. ExpenseRepository
ExpenseRepository --> Expense

Repository <|.. UserRepository
UserRepository --> User

Expense --> ExpenseType
Expense --> PayingMethod

Dialog <|- AddExpenseDialog
AddExpenseDialog -> Expense

@enduml
